{"version":3,"file":"Hand.js","sourceRoot":"","sources":["../../TypeScript/Models/Hand.ts"],"names":[],"mappings":"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","sourcesContent":["import {Deck} from \"./Deck\"\nimport {Card} from \"./Card\"\n\nexport class Hand {\n    cards: Card[]\n    score: number[]\n    stayed: boolean\n    winningText: string\n    surrender: boolean\n    insurance: number\n    winnings: number\n\n\n    constructor (public bet: number, public index: number) {\n        this.cards = []\n        this.score = []\n        this.stayed = false\n        this.surrender = false\n        this.insurance = 0\n    }\n\n    addCardFromDeck (deck: Deck): Card {\n        let cardToAdd = deck.cards.pop()\n        this.cards.push(cardToAdd)\n        this.calculateScore()\n        return cardToAdd\n    }\n\n    addCardFromCard (cardToAdd: Card): Card {\n        this.cards.push(cardToAdd)\n        this.calculateScore()\n        return cardToAdd\n    }\n\n    private calculateScore () {\n        this.score = []\n        let baseScore = 0\n        let aces = 0\n        for (let card of this.cards) {\n            baseScore += card.getScore()\n            if (card.type === \"Ace\") {\n                aces++\n            }\n        }\n\n        this.score.push(baseScore)\n        while (aces-- > 0) {\n            baseScore += 10\n            if (baseScore <= 21) {\n                this.score.push(baseScore)\n            }\n\n        }\n    }\n\n    getScoreText () {\n        if (this.score.length > 0) {\n            let text = `${this.score[0]}`\n            for (let i = 1; i < this.score.length; i++) {\n                text += ` or ${this.score[i]}`\n            }\n            return text\n        }\n        else return \"0\"\n    }\n\n    getHighestScore (): number {\n        if (this.score.length > 0) {\n\n            let max = this.score[0]\n\n            for (let score of this.score) {\n                max = Math.max(max, score)\n            }\n            return max\n        }\n        return 0\n    }\n\n    getLowestScore (): number {\n        if (this.score.length > 0) {\n            let min = this.score[0]\n\n            for (let score of this.score) {\n                min = Math.min(min, score)\n            }\n            return min;\n        }\n        return 0\n    }\n\n\n    checkBlackjack (): boolean {\n        let scoreCheck = this.getHighestScore() === 21\n        let cardCountCheck = this.cards.length === 2\n\n        return scoreCheck && cardCountCheck\n    }\n\n    check21 (): boolean {\n        for (let score of this.score) {\n            if (score === 21) {\n                return true\n            }\n        }\n        return false\n    }\n\n    checkBust (): boolean {\n        return this.getLowestScore() > 21\n    }\n\n\n    checkDoubleDown (): boolean {\n        let scoreCheck = this.getHighestScore() < 11\n        let cardCountCheck = this.cards.length <= 2\n\n        return scoreCheck && cardCountCheck && this.checkStay()\n    }\n\n    checkHit () {\n        return this.getLowestScore() <= 21 && this.checkStay()\n    }\n\n    checkStay () {\n        return !this.stayed\n    }\n\n    checkInsurance (dealerCards: Hand): boolean {\n        return dealerCards.cards[0].type === \"Ace\" && this.checkStay() && this.insurance === 0 && this.getHighestScore() < 21\n    }\n\n    checkSplit (handsNum: number): boolean {\n        let cardTypeCheck = this.cards[0].getScore() === this.cards[1].getScore()\n        let cardCountCheck = this.cards.length === 2\n        let handCountCheck = handsNum < 4\n        return cardTypeCheck && cardCountCheck && handCountCheck && this.checkStay()\n    }\n\n    checkSurrender (): boolean {\n        return this.cards.length === 2 && this.checkStay()\n    }\n\n    checkTurnOver (): boolean {\n        return this.checkBust() || this.checkStay()\n    }\n\n    decideWinner (dealerHand: Hand) {\n        let dealerScore = dealerHand.getHighestScore()\n        let playerScore = this.getHighestScore()\n\n        if (this.surrender === true) {\n            this.winningText = \"Surrendered\"\n            this.winnings = this.bet / 2\n        }\n\n        if (this.checkBlackjack() === true) {\n            this.winningText = \"Player Wins by Blackjack :D\"\n            this.winnings = this.bet * 3 / 2 + this.bet\n        }\n\n        if (dealerHand.checkBlackjack() === true) {\n            this.winningText = \"Dealer Wins by Blackjack :(\"\n            this.winnings = this.insurance * 2\n        }\n\n        if (playerScore > 21) {\n            this.winningText = \"Dealer Wins\"\n            this.winnings = 0\n        }\n\n        if (dealerScore > 21) {\n            this.winningText = \"Player Wins\"\n            this.winnings = this.bet * 2\n        }\n\n        if (dealerScore > playerScore) {\n            this.winningText = \"Dealer Wins\"\n            this.winnings = 0\n        }\n\n        if (dealerScore === playerScore) {\n            this.winningText = \"Well call it a draw @_@\"\n            this.winnings = this.bet\n        }\n        if (dealerScore < playerScore) {\n            this.winningText = \"Player Wins\"\n            this.winnings = this.bet * 2\n        }\n\n    }\n\n}\n"]}