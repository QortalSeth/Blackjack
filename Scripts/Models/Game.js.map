{"version":3,"file":"Game.js","sourceRoot":"","sources":["../../TypeScript/Models/Game.ts"],"names":[],"mappings":"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","sourcesContent":["import {Hand} from \"./Hand\"\nimport {Deck} from \"./Deck\"\nimport {Card} from \"./Card\"\n\nexport class Game {\n    dealerCards: Hand\n    playerCards: Hand[]\n    deck: Deck\n    numberOfDecks = 3\n    highScore: number\n\n\n    constructor (public score: number, bet: number) {\n        this.dealerCards = new Hand(0, 0)\n        this.playerCards = []\n        this.playerCards.push(new Hand(this.applyBet(bet), 0))\n        this.deck = new Deck(this.numberOfDecks)\n    }\n\n    applyBet (bet: number) {\n        this.score -= bet\n        return bet\n    }\n\n    /*\n    // TODO:\n    change checkWinner to only be called after dealerTurn. make it generate a list of win/lose statements for each hand\n    move playerWins and dealerWins to Hand class\n    */\n\n    hit (hand: Hand, card?: Card): Card {\n\n        if (card == undefined) {\n            card = hand.addCardFromDeck(this.deck)\n        }\n\n        else hand.addCardFromCard(card)\n\n        return card\n    }\n\n\n    playerStay (handIndex: number) {\n        this.playerCards[handIndex].stayed = true\n    }\n\n\n    checkWinner () {\n\n        for (let hand of this.playerCards) {\n            let winnings = hand.decideWinner(this.dealerCards)\n            this.score += winnings\n        }\n    }\n\n\n    DealerTurn () {\n        while (Math.floor(this.dealerCards.getLowestScore()) < 17)\n            this.hit(this.dealerCards)\n        this.checkWinner()\n    }\n\n    splitPlayerHand (handIndex: number) {\n        let hand = this.playerCards[handIndex]\n        let newHand = new Hand(this.applyBet(hand.bet), hand.index + 1)\n\n        newHand.addCardFromCard(hand.cards.pop())\n        this.hit(hand)\n        this.hit(newHand)\n        this.playerCards.push(newHand)\n    }\n\n    doubleDown (handIndex: number) {\n        let hand = this.playerCards[handIndex]\n        hand.bet += this.applyBet(hand.bet)\n        this.hit(hand)\n        this.playerStay(handIndex)\n    }\n\n    surrender (handIndex: number) {\n        let hand = this.playerCards[handIndex]\n        hand.surrender = true\n        this.playerStay(handIndex)\n    }\n\n    insureHand (handIndex: number, insureAmount: number) {\n        let hand = this.playerCards[handIndex]\n        insureAmount = Math.max(insureAmount, hand.bet / 2)\n        hand.insurance = insureAmount\n        this.score -= insureAmount\n    }\n\n}\n"]}