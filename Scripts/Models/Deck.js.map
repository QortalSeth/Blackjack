{"version":3,"file":"Deck.js","sourceRoot":"","sources":["../../TypeScript/Models/Deck.ts"],"names":[],"mappings":"AAAA,oFAAoF;;;;IAGpF,MAAa,IAAI;QAIf,YAAY,aAAqB;YAC/B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAA;YAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;gBACtC,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,qBAAc,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE;oBACtE,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,gBAAS,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE;wBACjE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,WAAI,CAAC,qBAAc,CAAC,SAAS,CAAC,EAAE,gBAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;qBAC3E;iBACF;aACF;YAED,IAAI,CAAC,OAAO,EAAE,CAAA;QAChB,CAAC;QAED,OAAO;YACL,IAAI,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAE5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;gBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;iBAC3D;aAEF;QACH,CAAC;QAEO,SAAS,CAAC,KAAa,EAAE,MAAc;YAC7C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YAC5B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;YACtC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAA;QAC3B,CAAC;QAEO,YAAY,CAAC,GAAW,EAAE,GAAW;YAC3C,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QAC9C,CAAC;QAED,QAAQ;YACN,IAAI,WAAW,GAAG,EAAE,CAAC;YACrB,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;gBAAE,WAAW,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC;aAAE;YACvE,OAAO,WAAW,CAAA;QACpB,CAAC;QAED,SAAS,KAAK,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC,CAAC;KAG3C;IAhDD,oBAgDC","sourcesContent":["// Deck: Card[], shuffle(), createDeck(), swapIndex(), displayDeck(), UpdateScores()\n\nimport { cardTypesArray, Card, cardSuits } from './Card'\nexport class Deck {\n  cards: Card[];\n\n\n  constructor(numberOfDecks: number) {\n    this.cards = []\n\n    for (let i = 0; i < numberOfDecks; i++) {\n      for (let typeIndex = 0; typeIndex < cardTypesArray.length; typeIndex++) {\n        for (let suitIndex = 0; suitIndex < cardSuits.length; suitIndex++) {\n          this.cards.push(new Card(cardTypesArray[typeIndex], cardSuits[suitIndex]))\n        }\n      }\n    }\n\n    this.shuffle()\n  }\n\n  shuffle(): void {\n    let timesToShuffle = this.getRandomInt(1, 5)\n\n    for (let j = 0; j < timesToShuffle; j++) {\n      for (let i = 0; i < this.cards.length; i++) {\n        this.swapIndex(i, this.getRandomInt(0, this.cards.length))\n      }\n\n    }\n  }\n\n  private swapIndex(index: number, index2: number): void {\n    let temp = this.cards[index]\n    this.cards[index] = this.cards[index2]\n    this.cards[index2] = temp\n  }\n\n  private getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * max) + min\n  }\n\n  toString(): string {\n    let returnValue = \"\";\n    for (let card of this.cards) { returnValue += card.toString() + \"\\n\"; }\n    return returnValue\n  }\n\n  printDeck() { console.log(this.toString) }\n\n\n}\n"]}