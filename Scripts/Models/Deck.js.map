{"version":3,"file":"Deck.js","sourceRoot":"","sources":["../../TypeScript/Models/Deck.ts"],"names":[],"mappings":"AAAA,oFAAoF;;;;IAIpF,MAAa,IAAI;QAIb,YAAa,aAAqB;YAC9B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAA;YAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;gBACpC,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,qBAAc,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE;oBACpE,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,gBAAS,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE;wBAC/D,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,WAAI,CAAC,qBAAc,CAAC,SAAS,CAAC,EAAE,gBAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;qBAC7E;iBACJ;aACJ;QACL,CAAC;QAED,OAAO,CAAE,IAAY,EAAE,IAAY;YAC/B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,WAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAA;QACzC,CAAC;QAED,OAAO;YACH,IAAI,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAE5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;gBACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACxC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;iBAC7D;aAEJ;QACL,CAAC;QAEO,SAAS,CAAE,KAAa,EAAE,MAAc;YAC5C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YAC5B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;YACtC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAA;QAC7B,CAAC;QAEO,YAAY,CAAE,GAAW,EAAE,GAAW;YAC1C,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAA;QAChD,CAAC;QAED,QAAQ;YACJ,IAAI,WAAW,GAAG,EAAE,CAAC;YACrB,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;gBACzB,WAAW,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC;aACzC;YACD,OAAO,WAAW,CAAA;QACtB,CAAC;QAED,OAAO;YACH,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAA;QAClC,CAAC;QAED,SAAS;YACL,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAC9B,CAAC;KAEJ;IAzDD,oBAyDC","sourcesContent":["// Deck: Card[], shuffle(), createDeck(), swapIndex(), displayDeck(), UpdateScores()\r\n\r\nimport {cardTypesArray, Card, cardSuits} from \"./Card\"\r\n\r\nexport class Deck {\r\n    cards: Card[];\r\n\r\n\r\n    constructor (numberOfDecks: number) {\r\n        this.cards = []\r\n\r\n        for (let i = 0; i < numberOfDecks; i++) {\r\n            for (let typeIndex = 0; typeIndex < cardTypesArray.length; typeIndex++) {\r\n                for (let suitIndex = 0; suitIndex < cardSuits.length; suitIndex++) {\r\n                    this.cards.push(new Card(cardTypesArray[typeIndex], cardSuits[suitIndex]))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addCard (type: string, suit: string) {\r\n        this.cards.push(new Card(type, suit))\r\n    }\r\n\r\n    shuffle (): void {\r\n        let timesToShuffle = this.getRandomInt(1, 5)\r\n\r\n        for (let j = 0; j < timesToShuffle; j++) {\r\n            for (let i = 0; i < this.cards.length; i++) {\r\n                this.swapIndex(i, this.getRandomInt(0, this.cards.length))\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private swapIndex (index: number, index2: number): void {\r\n        let temp = this.cards[index]\r\n        this.cards[index] = this.cards[index2]\r\n        this.cards[index2] = temp\r\n    }\r\n\r\n    private getRandomInt (min: number, max: number): number {\r\n        return Math.floor(Math.random() * max) + min\r\n    }\r\n\r\n    toString (): string {\r\n        let returnValue = \"\";\r\n        for (let card of this.cards) {\r\n            returnValue += card.toString() + \"\\n\";\r\n        }\r\n        return returnValue\r\n    }\r\n\r\n    isEmpty (): boolean {\r\n        return this.cards.length === 0\r\n    }\r\n\r\n    printDeck () {\r\n        console.log(this.toString)\r\n    }\r\n\r\n}\r\n"]}