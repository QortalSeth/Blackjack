{"version":3,"file":"DealerFunctions.js","sourceRoot":"","sources":["../../TypeScript/Controller/DealerFunctions.ts"],"names":[],"mappings":";;;IAKW,QAAA,UAAU,GAAG,UAAS,UAAsB;QACrD,IAAI,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,CAAA;QACnF,IAAI,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAA;QAE/D,OAAO,eAAe,EAAE;YACtB,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAA;YACrF,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAA;SAC5D;QAED,UAAU,CAAC,YAAY,EAAE,CAAA;QACzB,UAAU,CAAC,iBAAiB,EAAE,CAAA;IAChC,CAAC,CAAA;;AAID;;;;;;;;;;;;;;;;;;;;;;;GAuBG","sourcesContent":["\r\nimport { Game } from '../Models/Game'\r\nimport { Controller } from './Controller'\r\nimport * as html from './HTMLElements'\r\n\r\nexport let DealerTurn = function(controller: Controller) {\r\n  let lowChanceToLose = Math.floor(controller.game.dealerCards.getLowestScore()) < 17\r\n  let dealerScore = controller.game.dealerCards.getHighestScore()\r\n\r\n  while (lowChanceToLose) {\r\n    controller.html.addImageToDiv(controller.html.dealerDiv, controller.game.dealerHit())\r\n    dealerScore = controller.game.dealerCards.getHighestScore()\r\n  }\r\n\r\n  controller.updateScores()\r\n  controller.checkForEndOfGame()\r\n}\r\n\r\n\r\n\r\n/*\r\nlet DealerTurn = function(this: Controller) {\r\n  let mustHitToWin = game.playerStayed && game.playerCards.getHighestScore > game.dealerCards.getHighestScore\r\n  let lowChanceToLose = Math.floor(game.dealerCards.getHighestScore()) < 17\r\n  let dealerScore = game.dealerCards.getHighestScore()\r\n  let playerScore = game.playerCards.getHighestScore()\r\n\r\n  if (game.DealerStayed == false) {\r\n    if (game.playerStayed === true && playerScore > dealerScore) {\r\n      while (dealerScore < playerScore) {\r\n        addImageToDiv(dealerDiv, game.DealerHit())\r\n        dealerScore = game.dealerCards.getHighestScore()\r\n      }\r\n    }\r\n\r\n    else if (mustHitToWin || lowChanceToLose) {\r\n      addImageToDiv(dealerDiv, game.DealerHit())\r\n    }\r\n    else { game.DealerStay() }\r\n\r\n  }\r\n  updateScores()\r\n  checkForEndOfGame()\r\n}*/\r\n"]}