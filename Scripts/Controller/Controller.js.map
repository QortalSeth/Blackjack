{"version":3,"file":"Controller.js","sourceRoot":"","sources":["../../TypeScript/Controller/Controller.ts"],"names":[],"mappings":"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","sourcesContent":["import {Game}           from \"../Models/Game\"\nimport * as html        from \"./HTMLElements\"\nimport {HtmlHand}       from \"./HtmlHand\"\nimport {Card}           from \"../Models/Card\"\nimport * as testButtons from \"../Test/TestButtons\"\nimport * as testWins    from \"../Test/TestWins\"\nimport {Deck}           from \"../Models/Deck\"\n\nexport class Controller {\n    game: Game\n    debug = false\n    dealerHand: HtmlHand\n    playerHands: HtmlHand[]\n    startMoney = 10000\n    minimumBet = 20\n    private test: Function\n\n    constructor (public currentScore: number) {\n        html.startGameButton.addEventListener(\"click\", (event) => this.startNewGame())\n        html.betTextfield.addEventListener(\"keyup\", (event) => this.betTextFieldListener())\n        html.scoreAmount.innerText = this.startMoney.toString()\n    }\n\n\n    startNewGame () {\n        this.game = new Game(this.currentScore, Math.floor(parseInt(html.betTextfield.value)))\n        this.resetGameHtmlData()\n        this.updateCurrentScore()\n\n        if (this.debug) {\n            //html.testDiv.innerText = this.game.deck.toString()\n            //this.showDeck()\n        }\n\n        html.startGameButton.style.display = \"none\"\n        this.betDisplay(false)\n        this.initialHits()\n    }\n\n    initialHits () {\n        if (this.debug) {\n            //this.test = testButtons.testMaxSplits\n            this.test = testWins.unknownFailure\n            this.test()\n        }\n\n        this.dealerHand.hit()\n        this.playerHands[0].initialHit()\n        this.playerHands[0].hit()\n\n    }\n\n\n    resetGameHtmlData () {\n        html.removeDataFromDiv(html.dealerDiv)\n        html.removeDataFromDiv(html.playerDiv)\n        this.betDisplay(false)\n\n\n        this.dealerHand = new HtmlHand(0, this, html.dealerDiv, false)\n        this.playerHands = []\n        this.playerHands.push(new HtmlHand(0, this, html.playerDiv, true))\n\n    }\n\n    updateCurrentScore () {\n        html.scoreAmount.innerText = this.game.score.toString()\n    }\n\n    betDisplay (display: boolean) {\n        if (display) {\n            html.betSpan.style.display = \"inline\"\n            html.betTextfield.style.display = \"inline\"\n        }\n        else {\n            html.betSpan.style.display = \"none\"\n            html.betTextfield.style.display = \"none\"\n        }\n    }\n\n    betTextFieldListener () {\n        let textField = html.betTextfield\n        let number = parseInt(textField.value)\n\n        if (this.checkValidBet()) {\n            html.startGameButton.disabled = false\n        }\n        else\n            html.startGameButton.disabled = true\n    }\n\n    checkValidBet (): boolean {\n        let number = parseInt(html.betTextfield.value)\n\n        let isANumber = isNaN(number) === false\n        let minCheck = number >= this.minimumBet\n        let maxCheck = number <= this.currentScore\n        return isANumber && minCheck && maxCheck\n\n    }\n\n    dealerTurn () {\n        this.game.dealerTurn()\n        html.redrawImageDiv(this.dealerHand.imageDiv, this.dealerHand)\n        this.dealerHand.updateHand()\n        this.endGame()\n    }\n\n    endGame () {\n        let totalWinnings = 0;\n        for (let hand of this.playerHands) {\n            let winnings = hand.hand.winnings - hand.hand.bet\n\n\n            let winningsText = \"\"\n            if (winnings > 0)\n                winningsText = `You gained: ${Math.abs(winnings)}`\n            else if (winnings < 0) {\n                if (hand.hand.insurance > 0 && this.dealerHand.hand.checkBlackjack()) {\n                    winningsText = `You lost: ${Math.abs(hand.hand.bet)}, but gained it back because of insurance.`\n                    this.game.score += hand.hand.insurance * 3\n                }\n                else\n                    winningsText = `You lost: ${Math.abs(winnings)}`\n            }\n\n            else {\n                winningsText = `You gained: ${Math.abs(winnings)}`\n            }\n\n            totalWinnings += winnings\n            hand.winningsSpan.innerText = hand.hand.winningText\n            hand.winningsAmount.innerText = winningsText\n        }\n        this.currentScore = this.game.score\n        this.updateCurrentScore()\n        html.startGameButton.style.display = \"inline\"\n        this.betDisplay(true)\n        this.betTextFieldListener()\n        if (this.currentScore < this.minimumBet) {\n            html.startGameButton.style.display = \"none\"\n            let span = document.createElement(\"span\")\n            span.innerText = \"You don't have enough to continue. Game Over :(\"\n            span.style.backgroundColor = \"rgba(255, 255, 255, 0.5)\"\n            span.style.fontSize = \"xx-large\"\n            html.testDiv.appendChild(span)\n\n        }\n    }\n\n    showDeck () {\n        let deck = new Deck(1)\n\n        while (deck.isEmpty() === false) {\n            html.addImageToDiv(html.testDiv, deck.cards.pop())\n        }\n\n    }\n\n\n}\n"]}